
--------------------------------------
account
--------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------

--------------------------------------
comment
--------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------

--------------------------------------
profile
--------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
property
--------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
rate
--------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// General Availability
// ------------------------------------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public void setRoomTypeSellOrder(Integer roomTypeSellOrder) {
    this.roomTypeSellOrder = roomTypeSellOrder;
}
----------------------------------------------------
public Integer getMinLOS() {
    return minLOS;
}
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
public void setMaxLOS(Integer maxLOS) {
    this.maxLOS = maxLOS;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
public LocalDate getShoulderEndDate() {
    return shoulderEndDate;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
@DELETE
@OkOnEmpty
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_PLANS + BULK_UPDATE)
@Validated(BulkUpdateRatePlanRequest.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void bulkUpdateRatePlans(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, BulkUpdateRatePlanRequest bulkUpdateRatePlanRequest) throws RGuestException;
----------------------------------------------------
public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
}
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public Integer getMaxLOS() {
    return maxLOS;
}
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam(INCLUDE_NONBEDDED) boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
public Integer getRoomTypeSellOrder() {
    return roomTypeSellOrder;
}
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY_REPORT)
@Deprecated
GeneralAvailabilityReport getGeneralAvailabilityReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// OTA Rates
// ------------------------------------------------------------------------------
@GET
@Path(OTA_RATES)
OtaRatesResult getOtaRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") OtaRatesParams params) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
@GET
@Path(AVAILABLE_RATES + "/v1")
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rates (for reports)
// ------------------------------------------------------------------------------
@GET
@Path(REPORT_RATES)
AvailableRatePlan[] getReportRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(INCLUDE_GROUPS) Boolean includeGroups, @QueryParam(VERBOSE) Boolean verbose) throws RGuestException;
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@PUT
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@Validated(RateCalendarDetail.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateCalendarDetail updateRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, RateCalendarDetail resource) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_OVERRIDE)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateOverrideDetail rateOverride(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RateOverrideDetail rateOverride) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RATE_PLANS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRatePlan(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Availability
// ------------------------------------------------------------------------------
// note that companyId, groupId and groupRateDetailId are only supported for federated rates.
@GET
@Path(AVAILABLE_RATES)
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(FEATURED_RATE_PLAN_IDS) String featuredRatePlanIds, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(RATE_PLAN_CODES) String ratePlanCodes, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(IGNORE_BOOKING_DATES) Boolean ignoreBookingDates, @QueryParam(CURRENT_ROOM_TYPE_ID) String currentRoomTypeId, @QueryParam(CURRENT_ARRIVAL_DATE) LocalDate currentArrivalDate, @QueryParam(CURRENT_DEPARTURE_DATE) LocalDate currentDepartureDate, @QueryParam(UNAVAILABLE) Boolean unavailable, @QueryParam(EVALUATE_BY_DATE) Boolean evaluateByDate, @QueryParam(VERBOSE) Boolean verbose, @QueryParam(COMPANY_ID) String companyId, @QueryParam(GROUP_ID) String groupId, @QueryParam(GROUP_CODE) String groupCode, @QueryParam(INCLUDE_PACKAGES) Boolean includePackages) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@POST
@Path(RATE_CALENDARS + CALENDAR_LENGTH + LENGTH_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
int setRateCalendarLength(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(LENGTH) int length) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
/**
 * WARNING: This method will not work when called from a Java client! There is an issue with Joda fields in
 * {@link QueryParam} or {@link BeanParam} objects. As obtuse as the 'v0' method is, at least it works.
 */
@GET
@Path(PREVIEW_RATES + "/v1")
@PreAuthorize("hasPermission('Required', 'WriteRates')")
AvailableRatePlan[] previewYieldedRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_RULE_SET)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
List<RateRuleSetByDate> rateRuleSet(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RateRuleSetByDate> rateRuleSetByDate) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Calendars
// ------------------------------------------------------------------------------
@GET
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
RateCalendarDetail getRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
public Map<LocalDate, String> getRatePlanWithDate() {
    return ratePlanWithDate;
}
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
public void setRatePlanWithDate(Map<LocalDate, String> ratePlanWithDate) {
    this.ratePlanWithDate = ratePlanWithDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
reservation
--------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
public Map<String, PayoffBalanceErrorResult.Error> getErrorsByPaymentSettingId() {
    return errorsByPaymentSettingId;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path(CONFIRMATION_CODE)
ReservationSummary webCheckin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(_ID) String confirmationCode, @QueryParam("") ReservationWriteOptionalParameters reservationWriteOptionalParameters) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public void setRoomTypeSellOrder(Integer roomTypeSellOrder) {
    this.roomTypeSellOrder = roomTypeSellOrder;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(SEARCH_PATH + COMPANY_PATH)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
CompanyReservationSearchPage searchReservationsByCompanyId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, CompanyReservationSearchFilter searchFilter) throws RGuestException;
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancel")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Deprecated
ReservationSummary cancel(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public LocalDate getShoulderEndDate() {
    return shoulderEndDate;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
/**
 * Get {@see #id}.  @return {@link #id}.
 */
public String getId() {
    return id;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam(INCLUDE_NONBEDDED) boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    super.before();
    List<LocalDate> datesToCreate = Lists.newArrayList(now, now.plusDays(1), LocalDate.now().plusDays(2));
    rateSnapshots = createRateSnapshots(datesToCreate);
    occupancyPerDay = createDailyOccupancy(datesToCreate);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}/replacesRoom/{currentRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @PathParam("currentRoomId") String currentRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary updateEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationReservationEmailRequest reservationEmailRequest) throws RGuestException;
----------------------------------------------------
public String getId() {
    if (id == null) {
        id = UUID.randomUUID().toString();
    }
    return id;
}
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CheckinReservations')")
@Path("/{id}/checkin")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary checkin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
public PaymentInfo getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path("/")
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(CreateReservationRequest.class)
ReservationResult createReservation(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, CreateReservationRequest request) throws IntegrationException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/list")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceAllVerifiedGuestIdentityIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Collection<String> newElements) throws RGuestException;
----------------------------------------------------
public String getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'MoveReservations')")
@Path(MOVE_PATH)
MoveReservationSummary transferReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESERVATION_ID) String reservationId, ReservationMoveRequest reservationMoveRequest, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/{id}/card")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
DigitalRegistrationCardSettings getReservationCardInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@Validated(RateCalendarDetail.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateCalendarDetail updateRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, RateCalendarDetail resource) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@Deprecated
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    reservation = new Reservation();
    reservation.setTenantId(TestTenantId);
    reservation.setConfirmationId(TestConfirmationId);
    reservation.setPropertyId(TestPropertyId);
    reservation.setArrivalDate(TestArrivalDate);
    reservation.setDepartureDate(TestDepartureDate);
    reservation.setRoomType(TestRoomType);
    reservation.setRoomId(TestRoomId);
    reservation.setEchoToken(TestEchoToken);
    reservation.setMessageTimestamp(new Date());
    reservation.setAccountId(TestAccountId);
    reservation.setGroup(TestGroupName);
    reservation.setHousekeepingPattern(TestHousekeepingPattern);
    reservation.setCompany(TestCompanyName);
    reservation.setWholesaler(TestWholesalerName);
    reservation.setPrimaryGuestProfileId(TestGuestProfileId);
    reservation.setBookedBy(TestUsername);
    reservation.setSegmentCode(TestSegmentCode);
    reservation.setSourceCode(TestSourceCode);
    reservation.setNonRegisteredGuest(true);
    reservation.setLateCheckIn(true);
    reservation.setDoNotDisturb(true);
    reservation.setVipStatus("PLT");
    reservation.setNumberOfKeysCreated(TestNumberOfKeysCreated);
    setupBookingSources(reservation);
    setupIdentities(reservation);
    setupPreferences(reservation);
    setupAgencies(reservation);
    setupGuests(reservation);
}
----------------------------------------------------
public String getId() {
    return _id;
}
----------------------------------------------------
@DELETE
@Path(RATE_PLANS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRatePlan(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
public void setAutoNightAudit(boolean autoNightAudit) {
    this.autoNightAudit = autoNightAudit;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/dailyStatsByBuilding/{type}")
Map<String, GeneralAvailabilityResult> getDailyStatsReportByBuildings(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @PathParam("type") String type, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Availability
// ------------------------------------------------------------------------------
// note that companyId, groupId and groupRateDetailId are only supported for federated rates.
@GET
@Path(AVAILABLE_RATES)
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(FEATURED_RATE_PLAN_IDS) String featuredRatePlanIds, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(RATE_PLAN_CODES) String ratePlanCodes, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(IGNORE_BOOKING_DATES) Boolean ignoreBookingDates, @QueryParam(CURRENT_ROOM_TYPE_ID) String currentRoomTypeId, @QueryParam(CURRENT_ARRIVAL_DATE) LocalDate currentArrivalDate, @QueryParam(CURRENT_DEPARTURE_DATE) LocalDate currentDepartureDate, @QueryParam(UNAVAILABLE) Boolean unavailable, @QueryParam(EVALUATE_BY_DATE) Boolean evaluateByDate, @QueryParam(VERBOSE) Boolean verbose, @QueryParam(COMPANY_ID) String companyId, @QueryParam(GROUP_ID) String groupId, @QueryParam(GROUP_CODE) String groupCode, @QueryParam(INCLUDE_PACKAGES) Boolean includePackages) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String oldElement, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String newElement) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    now = LocalDate.now();
}
----------------------------------------------------
@Override
public boolean apply(GuestPreference input) {
    return GuestPreference.isValid(input);
}
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Validated(SMSPreferences.class)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalRoomTypeAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
public String getId() {
    return toString();
}
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> removeVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String element, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Validated(TrackingInfo.class)
@Path("/{id}/tracking")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
TrackingInfo updateTrackingInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, TrackingInfo trackingInfo) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/modifyGroupReservationsByPreset")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Map<String, UpdatedExistingReservationResult> updateExistingReservationsWithPreset(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, UpdatedPresetInfo update) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Calendars
// ------------------------------------------------------------------------------
@GET
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
RateCalendarDetail getRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancellationPolicies")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationCancellationPolicies getCancellationPolicies(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// General Availability
// ------------------------------------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
public void setContinueOnPaymentFailure(boolean continueOnPaymentFailure) {
    this.continueOnPaymentFailure = continueOnPaymentFailure;
}
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
public Integer getMinLOS() {
    return minLOS;
}
----------------------------------------------------
@Before
public void setup() {
    testAgency = new Agency();
}
----------------------------------------------------
public String getPaymentMethodId() {
    return paymentMethodId;
}
----------------------------------------------------
public void setMaxLOS(Integer maxLOS) {
    this.maxLOS = maxLOS;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/doNotMoveRoom")
@Consumes("text/plain")
@Deprecated
Response updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Boolean newValue) throws RGuestException;
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@DELETE
@OkOnEmpty
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
public String getId();
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(STAY_DATE_SUMMARY)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<StayDateSummary> getStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_PLANS + BULK_UPDATE)
@Validated(BulkUpdateRatePlanRequest.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void bulkUpdateRatePlans(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, BulkUpdateRatePlanRequest bulkUpdateRatePlanRequest) throws RGuestException;
----------------------------------------------------
public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/summary")
SummaryReport getSummaryReport(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("date") LocalDate dateToReportOn) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/altConfirmationCode")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
String updateAltConfirmationCode(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, String altConfirmationCode, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public Integer getMaxLOS() {
    return maxLOS;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@POST
@Path("/")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(ReservationCreateRequest.class)
ReservationSummary createReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCreateRequest reservation, @QueryParam("isPending") boolean isPending, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
public Integer getRoomTypeSellOrder() {
    return roomTypeSellOrder;
}
----------------------------------------------------
public String getId() {
    return _id = date.toString();
}
----------------------------------------------------
@GET
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY_REPORT)
@Deprecated
GeneralAvailabilityReport getGeneralAvailabilityReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/modifyStay")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary modifyStay(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, StayModificationDetails stayModificationDetails) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// OTA Rates
// ------------------------------------------------------------------------------
@GET
@Path(OTA_RATES)
OtaRatesResult getOtaRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") OtaRatesParams params) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@GET
@Path("/housekeepingPatternId/{housekeepingPatternId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
List<ReservationSummary> findByHousekeepingPatternId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("housekeepingPatternId") String housekeepingPatternId, @QueryParam("date") LocalDate date, @QueryParam("statusId") String[] statusIds) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/filteredNameAndDates")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
List<ReservationNameAndDates> findReservationNameAndDatesByPost(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCollectionRequest request) throws RGuestException;
----------------------------------------------------
public Occupancy getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path("/{id}/occupancy")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
Occupancy getOccupancy(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@GET
@Path(AVAILABLE_RATES + "/v1")
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(GUEST_RESOURCE + "allReservations")
Map<String, List<ReservationSummary>> getActiveReservations(@PathParam(TENANT_ID) String tenantId, ActiveReservationRequest activeReservationRequest) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
public String getId() {
    return this.id;
}
----------------------------------------------------
public String getAccountId() {
    return accountId;
}
----------------------------------------------------
public String getAccountId() {
    return this.accountId;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
public void setForceCheckin(boolean forceCheckin) {
    this.forceCheckin = forceCheckin;
}
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rates (for reports)
// ------------------------------------------------------------------------------
@GET
@Path(REPORT_RATES)
AvailableRatePlan[] getReportRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(INCLUDE_GROUPS) Boolean includeGroups, @QueryParam(VERBOSE) Boolean verbose) throws RGuestException;
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
void saveEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationEmailRequest confirmationEmailRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_OVERRIDE)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateOverrideDetail rateOverride(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RateOverrideDetail rateOverride) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/interfaceSettings")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
InterfaceSettings getInterfaceSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
public void setSmsPreferences(SMSPreferences smsPreferences) {
    this.smsPreferences = smsPreferences;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes("text/plain")
Response updateLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String time) throws RGuestException;
----------------------------------------------------
@POST
@Path(RATE_CALENDARS + CALENDAR_LENGTH + LENGTH_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
int setRateCalendarLength(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(LENGTH) int length) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
public GuestMessageIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
/**
 * WARNING: This method will not work when called from a Java client! There is an issue with Joda fields in
 * {@link QueryParam} or {@link BeanParam} objects. As obtuse as the 'v0' method is, at least it works.
 */
@GET
@Path(PREVIEW_RATES + "/v1")
@PreAuthorize("hasPermission('Required', 'WriteRates')")
AvailableRatePlan[] previewYieldedRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(ROOM_MOVE_TRACKING)
List<ReservationSummary> getRoomMoveReasonTrackingReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_RULE_SET)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
List<RateRuleSetByDate> rateRuleSet(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RateRuleSetByDate> rateRuleSetByDate) throws RGuestException;
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Response deleteLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/roomAssignmentRestricitions")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
RoomAssignmentRestrictions updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, RoomAssignmentRestrictions newValue) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferGuestReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedGuestProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, GuestProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
public InterfaceSettings getInterfaceSettings() {
    return interfaceSettings;
}
----------------------------------------------------
public Map<LocalDate, String> getRatePlanWithDate() {
    return ratePlanWithDate;
}
----------------------------------------------------
public OccupancyExport getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@Override
public PropertyLevelIdentifier deserialize(final JsonParser jsonParser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
    Map<String, String> jsonIdentifier = jsonParser.readValueAs(Map.class);
    PropertyLevelIdentifier identifier = new PropertyLevelIdentifier(jsonIdentifier.get("tenantId"), jsonIdentifier.get("propertyId"), jsonIdentifier.get("id"));
    return identifier;
}
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public void setRatePlanWithDate(Map<LocalDate, String> ratePlanWithDate) {
    this.ratePlanWithDate = ratePlanWithDate;
}
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
servicerequest
--------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
public Map<String, PayoffBalanceErrorResult.Error> getErrorsByPaymentSettingId() {
    return errorsByPaymentSettingId;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path(CONFIRMATION_CODE)
ReservationSummary webCheckin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(_ID) String confirmationCode, @QueryParam("") ReservationWriteOptionalParameters reservationWriteOptionalParameters) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public void setRoomTypeSellOrder(Integer roomTypeSellOrder) {
    this.roomTypeSellOrder = roomTypeSellOrder;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(SEARCH_PATH + COMPANY_PATH)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
CompanyReservationSearchPage searchReservationsByCompanyId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, CompanyReservationSearchFilter searchFilter) throws RGuestException;
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancel")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Deprecated
ReservationSummary cancel(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public LocalDate getShoulderEndDate() {
    return shoulderEndDate;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
public ServicePattern toModel() {
    ServicePattern servicePattern = new ServicePattern();
    servicePattern.setId(id);
    servicePattern.setCustom(custom);
    servicePattern.setLengthOfStay(lengthOfStay);
    servicePattern.setLastDayServices(lastDayServices);
    servicePattern.setType(type);
    servicePattern.setName(name);
    Map<String, int[]> servicePatternMap = new HashMap<>();
    Collection<ServicePatternAssociatedService> servicePatternAssociatedServices = services.values();
    for (ServicePatternAssociatedService servicePatternAssociatedService : servicePatternAssociatedServices) {
        servicePatternMap.put(servicePatternAssociatedService.getId(), servicePatternAssociatedService.getOccurrenceDays());
    }
    servicePattern.setServices(servicePatternMap);
    return servicePattern;
}
----------------------------------------------------
/**
 * Get {@see #id}.  @return {@link #id}.
 */
public String getId() {
    return id;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam(INCLUDE_NONBEDDED) boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    super.before();
    List<LocalDate> datesToCreate = Lists.newArrayList(now, now.plusDays(1), LocalDate.now().plusDays(2));
    rateSnapshots = createRateSnapshots(datesToCreate);
    occupancyPerDay = createDailyOccupancy(datesToCreate);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}/replacesRoom/{currentRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @PathParam("currentRoomId") String currentRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, JavaType javaType) {
    T object = null;
    try {
        object = MAPPER.readValue(json, javaType);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary updateEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationReservationEmailRequest reservationEmailRequest) throws RGuestException;
----------------------------------------------------
public String getId() {
    if (id == null) {
        id = UUID.randomUUID().toString();
    }
    return id;
}
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CheckinReservations')")
@Path("/{id}/checkin")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary checkin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
public PaymentInfo getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path("/")
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(CreateReservationRequest.class)
ReservationResult createReservation(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, CreateReservationRequest request) throws IntegrationException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/list")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceAllVerifiedGuestIdentityIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Collection<String> newElements) throws RGuestException;
----------------------------------------------------
public String getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'MoveReservations')")
@Path(MOVE_PATH)
MoveReservationSummary transferReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESERVATION_ID) String reservationId, ReservationMoveRequest reservationMoveRequest, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/{id}/card")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
DigitalRegistrationCardSettings getReservationCardInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@Validated(RateCalendarDetail.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateCalendarDetail updateRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, RateCalendarDetail resource) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
String getId();
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@Deprecated
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    reservation = new Reservation();
    reservation.setTenantId(TestTenantId);
    reservation.setConfirmationId(TestConfirmationId);
    reservation.setPropertyId(TestPropertyId);
    reservation.setArrivalDate(TestArrivalDate);
    reservation.setDepartureDate(TestDepartureDate);
    reservation.setRoomType(TestRoomType);
    reservation.setRoomId(TestRoomId);
    reservation.setEchoToken(TestEchoToken);
    reservation.setMessageTimestamp(new Date());
    reservation.setAccountId(TestAccountId);
    reservation.setGroup(TestGroupName);
    reservation.setHousekeepingPattern(TestHousekeepingPattern);
    reservation.setCompany(TestCompanyName);
    reservation.setWholesaler(TestWholesalerName);
    reservation.setPrimaryGuestProfileId(TestGuestProfileId);
    reservation.setBookedBy(TestUsername);
    reservation.setSegmentCode(TestSegmentCode);
    reservation.setSourceCode(TestSourceCode);
    reservation.setNonRegisteredGuest(true);
    reservation.setLateCheckIn(true);
    reservation.setDoNotDisturb(true);
    reservation.setVipStatus("PLT");
    reservation.setNumberOfKeysCreated(TestNumberOfKeysCreated);
    setupBookingSources(reservation);
    setupIdentities(reservation);
    setupPreferences(reservation);
    setupAgencies(reservation);
    setupGuests(reservation);
}
----------------------------------------------------
public String getId() {
    return _id;
}
----------------------------------------------------
@DELETE
@Path(RATE_PLANS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRatePlan(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
public void setAutoNightAudit(boolean autoNightAudit) {
    this.autoNightAudit = autoNightAudit;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/dailyStatsByBuilding/{type}")
Map<String, GeneralAvailabilityResult> getDailyStatsReportByBuildings(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @PathParam("type") String type, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Availability
// ------------------------------------------------------------------------------
// note that companyId, groupId and groupRateDetailId are only supported for federated rates.
@GET
@Path(AVAILABLE_RATES)
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(FEATURED_RATE_PLAN_IDS) String featuredRatePlanIds, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(RATE_PLAN_CODES) String ratePlanCodes, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(IGNORE_BOOKING_DATES) Boolean ignoreBookingDates, @QueryParam(CURRENT_ROOM_TYPE_ID) String currentRoomTypeId, @QueryParam(CURRENT_ARRIVAL_DATE) LocalDate currentArrivalDate, @QueryParam(CURRENT_DEPARTURE_DATE) LocalDate currentDepartureDate, @QueryParam(UNAVAILABLE) Boolean unavailable, @QueryParam(EVALUATE_BY_DATE) Boolean evaluateByDate, @QueryParam(VERBOSE) Boolean verbose, @QueryParam(COMPANY_ID) String companyId, @QueryParam(GROUP_ID) String groupId, @QueryParam(GROUP_CODE) String groupCode, @QueryParam(INCLUDE_PACKAGES) Boolean includePackages) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String oldElement, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String newElement) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    now = LocalDate.now();
}
----------------------------------------------------
@Override
public boolean apply(GuestPreference input) {
    return GuestPreference.isValid(input);
}
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Validated(SMSPreferences.class)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalRoomTypeAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
public String getId() {
    return toString();
}
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> removeVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String element, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Validated(TrackingInfo.class)
@Path("/{id}/tracking")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
TrackingInfo updateTrackingInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, TrackingInfo trackingInfo) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/modifyGroupReservationsByPreset")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Map<String, UpdatedExistingReservationResult> updateExistingReservationsWithPreset(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, UpdatedPresetInfo update) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Calendars
// ------------------------------------------------------------------------------
@GET
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
RateCalendarDetail getRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancellationPolicies")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationCancellationPolicies getCancellationPolicies(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// General Availability
// ------------------------------------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
public void setContinueOnPaymentFailure(boolean continueOnPaymentFailure) {
    this.continueOnPaymentFailure = continueOnPaymentFailure;
}
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
public Integer getMinLOS() {
    return minLOS;
}
----------------------------------------------------
@Before
public void setup() {
    testAgency = new Agency();
}
----------------------------------------------------
public String getPaymentMethodId() {
    return paymentMethodId;
}
----------------------------------------------------
public void setMaxLOS(Integer maxLOS) {
    this.maxLOS = maxLOS;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/doNotMoveRoom")
@Consumes("text/plain")
@Deprecated
Response updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Boolean newValue) throws RGuestException;
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@DELETE
@OkOnEmpty
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
public String getId();
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(STAY_DATE_SUMMARY)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<StayDateSummary> getStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_PLANS + BULK_UPDATE)
@Validated(BulkUpdateRatePlanRequest.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void bulkUpdateRatePlans(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, BulkUpdateRatePlanRequest bulkUpdateRatePlanRequest) throws RGuestException;
----------------------------------------------------
public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/summary")
SummaryReport getSummaryReport(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("date") LocalDate dateToReportOn) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/altConfirmationCode")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
String updateAltConfirmationCode(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, String altConfirmationCode, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public Integer getMaxLOS() {
    return maxLOS;
}
----------------------------------------------------
@Before
public void before() {
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    mapper.registerModule(new JodaModule());
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@POST
@Path("/")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(ReservationCreateRequest.class)
ReservationSummary createReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCreateRequest reservation, @QueryParam("isPending") boolean isPending, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
public Integer getRoomTypeSellOrder() {
    return roomTypeSellOrder;
}
----------------------------------------------------
public String getId() {
    return _id = date.toString();
}
----------------------------------------------------
@GET
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY_REPORT)
@Deprecated
GeneralAvailabilityReport getGeneralAvailabilityReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/modifyStay")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary modifyStay(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, StayModificationDetails stayModificationDetails) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// OTA Rates
// ------------------------------------------------------------------------------
@GET
@Path(OTA_RATES)
OtaRatesResult getOtaRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") OtaRatesParams params) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
private static <T> String serialize(T object) {
    String json = null;
    try {
        json = MAPPER.writeValueAsString(object);
        assertNotNull(json);
    } catch (IOException e) {
        e.printStackTrace();
        fail(SERIALIZATION_ERROR);
    }
    return json;
}
----------------------------------------------------
@GET
@Path("/housekeepingPatternId/{housekeepingPatternId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
List<ReservationSummary> findByHousekeepingPatternId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("housekeepingPatternId") String housekeepingPatternId, @QueryParam("date") LocalDate date, @QueryParam("statusId") String[] statusIds) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/filteredNameAndDates")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
List<ReservationNameAndDates> findReservationNameAndDatesByPost(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCollectionRequest request) throws RGuestException;
----------------------------------------------------
public Occupancy getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path("/{id}/occupancy")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
Occupancy getOccupancy(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@GET
@Path(AVAILABLE_RATES + "/v1")
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(GUEST_RESOURCE + "allReservations")
Map<String, List<ReservationSummary>> getActiveReservations(@PathParam(TENANT_ID) String tenantId, ActiveReservationRequest activeReservationRequest) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
public String getId() {
    return this.id;
}
----------------------------------------------------
public String getAccountId() {
    return accountId;
}
----------------------------------------------------
public String getAccountId() {
    return this.accountId;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
public void setForceCheckin(boolean forceCheckin) {
    this.forceCheckin = forceCheckin;
}
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rates (for reports)
// ------------------------------------------------------------------------------
@GET
@Path(REPORT_RATES)
AvailableRatePlan[] getReportRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(INCLUDE_GROUPS) Boolean includeGroups, @QueryParam(VERBOSE) Boolean verbose) throws RGuestException;
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
void saveEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationEmailRequest confirmationEmailRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_OVERRIDE)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateOverrideDetail rateOverride(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RateOverrideDetail rateOverride) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/interfaceSettings")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
InterfaceSettings getInterfaceSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
public void setSmsPreferences(SMSPreferences smsPreferences) {
    this.smsPreferences = smsPreferences;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes("text/plain")
Response updateLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String time) throws RGuestException;
----------------------------------------------------
@POST
@Path(RATE_CALENDARS + CALENDAR_LENGTH + LENGTH_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
int setRateCalendarLength(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(LENGTH) int length) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
public GuestMessageIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
/**
 * WARNING: This method will not work when called from a Java client! There is an issue with Joda fields in
 * {@link QueryParam} or {@link BeanParam} objects. As obtuse as the 'v0' method is, at least it works.
 */
@GET
@Path(PREVIEW_RATES + "/v1")
@PreAuthorize("hasPermission('Required', 'WriteRates')")
AvailableRatePlan[] previewYieldedRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(ROOM_MOVE_TRACKING)
List<ReservationSummary> getRoomMoveReasonTrackingReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, Class<T> clazz) {
    T object = null;
    try {
        object = MAPPER.readValue(json, clazz);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_RULE_SET)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
List<RateRuleSetByDate> rateRuleSet(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RateRuleSetByDate> rateRuleSetByDate) throws RGuestException;
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Response deleteLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/roomAssignmentRestricitions")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
RoomAssignmentRestrictions updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, RoomAssignmentRestrictions newValue) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferGuestReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedGuestProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, GuestProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
public InterfaceSettings getInterfaceSettings() {
    return interfaceSettings;
}
----------------------------------------------------
public Map<LocalDate, String> getRatePlanWithDate() {
    return ratePlanWithDate;
}
----------------------------------------------------
public OccupancyExport getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@Override
public PropertyLevelIdentifier deserialize(final JsonParser jsonParser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
    Map<String, String> jsonIdentifier = jsonParser.readValueAs(Map.class);
    PropertyLevelIdentifier identifier = new PropertyLevelIdentifier(jsonIdentifier.get("tenantId"), jsonIdentifier.get("propertyId"), jsonIdentifier.get("id"));
    return identifier;
}
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public void setRatePlanWithDate(Map<LocalDate, String> ratePlanWithDate) {
    this.ratePlanWithDate = ratePlanWithDate;
}
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
integration
--------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
public Map<String, PayoffBalanceErrorResult.Error> getErrorsByPaymentSettingId() {
    return errorsByPaymentSettingId;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path(CONFIRMATION_CODE)
ReservationSummary webCheckin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(_ID) String confirmationCode, @QueryParam("") ReservationWriteOptionalParameters reservationWriteOptionalParameters) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public void setRoomTypeSellOrder(Integer roomTypeSellOrder) {
    this.roomTypeSellOrder = roomTypeSellOrder;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(SEARCH_PATH + COMPANY_PATH)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
CompanyReservationSearchPage searchReservationsByCompanyId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, CompanyReservationSearchFilter searchFilter) throws RGuestException;
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancel")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Deprecated
ReservationSummary cancel(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public LocalDate getShoulderEndDate() {
    return shoulderEndDate;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
public ServicePattern toModel() {
    ServicePattern servicePattern = new ServicePattern();
    servicePattern.setId(id);
    servicePattern.setCustom(custom);
    servicePattern.setLengthOfStay(lengthOfStay);
    servicePattern.setLastDayServices(lastDayServices);
    servicePattern.setType(type);
    servicePattern.setName(name);
    Map<String, int[]> servicePatternMap = new HashMap<>();
    Collection<ServicePatternAssociatedService> servicePatternAssociatedServices = services.values();
    for (ServicePatternAssociatedService servicePatternAssociatedService : servicePatternAssociatedServices) {
        servicePatternMap.put(servicePatternAssociatedService.getId(), servicePatternAssociatedService.getOccurrenceDays());
    }
    servicePattern.setServices(servicePatternMap);
    return servicePattern;
}
----------------------------------------------------
/**
 * Get {@see #id}.  @return {@link #id}.
 */
public String getId() {
    return id;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam(INCLUDE_NONBEDDED) boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    super.before();
    List<LocalDate> datesToCreate = Lists.newArrayList(now, now.plusDays(1), LocalDate.now().plusDays(2));
    rateSnapshots = createRateSnapshots(datesToCreate);
    occupancyPerDay = createDailyOccupancy(datesToCreate);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}/replacesRoom/{currentRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @PathParam("currentRoomId") String currentRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path("/tenants/{" + CommandInterface.TENANT_ID + "}/{" + COMMAND_ID + "}")
CommandResult execute(@PathParam(TENANT_ID) String tenantId, @PathParam(COMMAND_ID) String commandId, CommandPayload commandPayload) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, JavaType javaType) {
    T object = null;
    try {
        object = MAPPER.readValue(json, javaType);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary updateEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationReservationEmailRequest reservationEmailRequest) throws RGuestException;
----------------------------------------------------
public String getId() {
    if (id == null) {
        id = UUID.randomUUID().toString();
    }
    return id;
}
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@Override
public ExternalReferenceType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
    return ExternalReferenceType.fromString(jp.getText());
}
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CheckinReservations')")
@Path("/{id}/checkin")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary checkin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
public PaymentInfo getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path("/")
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(CreateReservationRequest.class)
ReservationResult createReservation(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, CreateReservationRequest request) throws IntegrationException;
----------------------------------------------------
@POST
@Path("/stayDateSummary")
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
void sendStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, EmailRequest emailRequest) throws RGuestException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/list")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceAllVerifiedGuestIdentityIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Collection<String> newElements) throws RGuestException;
----------------------------------------------------
public String getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'MoveReservations')")
@Path(MOVE_PATH)
MoveReservationSummary transferReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESERVATION_ID) String reservationId, ReservationMoveRequest reservationMoveRequest, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/{id}/card")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
DigitalRegistrationCardSettings getReservationCardInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@PUT
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@Validated(RateCalendarDetail.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateCalendarDetail updateRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, RateCalendarDetail resource) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
String getId();
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@Deprecated
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    reservation = new Reservation();
    reservation.setTenantId(TestTenantId);
    reservation.setConfirmationId(TestConfirmationId);
    reservation.setPropertyId(TestPropertyId);
    reservation.setArrivalDate(TestArrivalDate);
    reservation.setDepartureDate(TestDepartureDate);
    reservation.setRoomType(TestRoomType);
    reservation.setRoomId(TestRoomId);
    reservation.setEchoToken(TestEchoToken);
    reservation.setMessageTimestamp(new Date());
    reservation.setAccountId(TestAccountId);
    reservation.setGroup(TestGroupName);
    reservation.setHousekeepingPattern(TestHousekeepingPattern);
    reservation.setCompany(TestCompanyName);
    reservation.setWholesaler(TestWholesalerName);
    reservation.setPrimaryGuestProfileId(TestGuestProfileId);
    reservation.setBookedBy(TestUsername);
    reservation.setSegmentCode(TestSegmentCode);
    reservation.setSourceCode(TestSourceCode);
    reservation.setNonRegisteredGuest(true);
    reservation.setLateCheckIn(true);
    reservation.setDoNotDisturb(true);
    reservation.setVipStatus("PLT");
    reservation.setNumberOfKeysCreated(TestNumberOfKeysCreated);
    setupBookingSources(reservation);
    setupIdentities(reservation);
    setupPreferences(reservation);
    setupAgencies(reservation);
    setupGuests(reservation);
}
----------------------------------------------------
public String getId() {
    return _id;
}
----------------------------------------------------
@DELETE
@Path(RATE_PLANS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRatePlan(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
public void setAutoNightAudit(boolean autoNightAudit) {
    this.autoNightAudit = autoNightAudit;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/dailyStatsByBuilding/{type}")
Map<String, GeneralAvailabilityResult> getDailyStatsReportByBuildings(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @PathParam("type") String type, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Availability
// ------------------------------------------------------------------------------
// note that companyId, groupId and groupRateDetailId are only supported for federated rates.
@GET
@Path(AVAILABLE_RATES)
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(FEATURED_RATE_PLAN_IDS) String featuredRatePlanIds, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(RATE_PLAN_CODES) String ratePlanCodes, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(IGNORE_BOOKING_DATES) Boolean ignoreBookingDates, @QueryParam(CURRENT_ROOM_TYPE_ID) String currentRoomTypeId, @QueryParam(CURRENT_ARRIVAL_DATE) LocalDate currentArrivalDate, @QueryParam(CURRENT_DEPARTURE_DATE) LocalDate currentDepartureDate, @QueryParam(UNAVAILABLE) Boolean unavailable, @QueryParam(EVALUATE_BY_DATE) Boolean evaluateByDate, @QueryParam(VERBOSE) Boolean verbose, @QueryParam(COMPANY_ID) String companyId, @QueryParam(GROUP_ID) String groupId, @QueryParam(GROUP_CODE) String groupCode, @QueryParam(INCLUDE_PACKAGES) Boolean includePackages) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String oldElement, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String newElement) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    now = LocalDate.now();
}
----------------------------------------------------
@Override
public boolean apply(GuestPreference input) {
    return GuestPreference.isValid(input);
}
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
public List<AvailableRatePlanRates> getRatePlans() {
    return ratePlans;
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Validated(SMSPreferences.class)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalRoomTypeAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
public String getId() {
    return toString();
}
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> removeVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String element, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Validated(TrackingInfo.class)
@Path("/{id}/tracking")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
TrackingInfo updateTrackingInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, TrackingInfo trackingInfo) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/modifyGroupReservationsByPreset")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Map<String, UpdatedExistingReservationResult> updateExistingReservationsWithPreset(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, UpdatedPresetInfo update) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Calendars
// ------------------------------------------------------------------------------
@GET
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
RateCalendarDetail getRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@Path("/tenants/{" + CommandInterface.TENANT_ID + "}/interfaces/{" + CommandInterface.INTERFACE_ID + "}/{" + COMMAND_ID + "}")
@Consumes(MediaType.APPLICATION_JSON)
CommandResult execute(@PathParam(TENANT_ID) String tenantId, @PathParam(INTERFACE_ID) String interfaceId, @PathParam(COMMAND_ID) String commandId, CommandPayload commandPayload) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancellationPolicies")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationCancellationPolicies getCancellationPolicies(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// General Availability
// ------------------------------------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
public void setContinueOnPaymentFailure(boolean continueOnPaymentFailure) {
    this.continueOnPaymentFailure = continueOnPaymentFailure;
}
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
public Integer getMinLOS() {
    return minLOS;
}
----------------------------------------------------
@Before
public void setup() {
    testAgency = new Agency();
}
----------------------------------------------------
public String getPaymentMethodId() {
    return paymentMethodId;
}
----------------------------------------------------
public void setMaxLOS(Integer maxLOS) {
    this.maxLOS = maxLOS;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/doNotMoveRoom")
@Consumes("text/plain")
@Deprecated
Response updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Boolean newValue) throws RGuestException;
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@DELETE
@OkOnEmpty
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
public String getId();
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(STAY_DATE_SUMMARY)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<StayDateSummary> getStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_PLANS + BULK_UPDATE)
@Validated(BulkUpdateRatePlanRequest.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void bulkUpdateRatePlans(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, BulkUpdateRatePlanRequest bulkUpdateRatePlanRequest) throws RGuestException;
----------------------------------------------------
public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/summary")
SummaryReport getSummaryReport(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("date") LocalDate dateToReportOn) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/altConfirmationCode")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
String updateAltConfirmationCode(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, String altConfirmationCode, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public Integer getMaxLOS() {
    return maxLOS;
}
----------------------------------------------------
@Before
public void before() {
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    mapper.registerModule(new JodaModule());
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@POST
@Path("/")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(ReservationCreateRequest.class)
ReservationSummary createReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCreateRequest reservation, @QueryParam("isPending") boolean isPending, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
public Integer getRoomTypeSellOrder() {
    return roomTypeSellOrder;
}
----------------------------------------------------
public String getId() {
    return _id = date.toString();
}
----------------------------------------------------
@GET
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY_REPORT)
@Deprecated
GeneralAvailabilityReport getGeneralAvailabilityReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/modifyStay")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary modifyStay(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, StayModificationDetails stayModificationDetails) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// OTA Rates
// ------------------------------------------------------------------------------
@GET
@Path(OTA_RATES)
OtaRatesResult getOtaRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") OtaRatesParams params) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
private static <T> String serialize(T object) {
    String json = null;
    try {
        json = MAPPER.writeValueAsString(object);
        assertNotNull(json);
    } catch (IOException e) {
        e.printStackTrace();
        fail(SERIALIZATION_ERROR);
    }
    return json;
}
----------------------------------------------------
@GET
@Path("/housekeepingPatternId/{housekeepingPatternId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
List<ReservationSummary> findByHousekeepingPatternId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("housekeepingPatternId") String housekeepingPatternId, @QueryParam("date") LocalDate date, @QueryParam("statusId") String[] statusIds) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/filteredNameAndDates")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
List<ReservationNameAndDates> findReservationNameAndDatesByPost(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCollectionRequest request) throws RGuestException;
----------------------------------------------------
public Occupancy getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path("/{id}/occupancy")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
Occupancy getOccupancy(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@GET
@Path(AVAILABLE_RATES + "/v1")
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(GUEST_RESOURCE + "allReservations")
Map<String, List<ReservationSummary>> getActiveReservations(@PathParam(TENANT_ID) String tenantId, ActiveReservationRequest activeReservationRequest) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
public String getId() {
    return this.id;
}
----------------------------------------------------
public String getAccountId() {
    return accountId;
}
----------------------------------------------------
public String getAccountId() {
    return this.accountId;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
public void setForceCheckin(boolean forceCheckin) {
    this.forceCheckin = forceCheckin;
}
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rates (for reports)
// ------------------------------------------------------------------------------
@GET
@Path(REPORT_RATES)
AvailableRatePlan[] getReportRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(INCLUDE_GROUPS) Boolean includeGroups, @QueryParam(VERBOSE) Boolean verbose) throws RGuestException;
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
void saveEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationEmailRequest confirmationEmailRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_OVERRIDE)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateOverrideDetail rateOverride(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RateOverrideDetail rateOverride) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/interfaceSettings")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
InterfaceSettings getInterfaceSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
public void setSmsPreferences(SMSPreferences smsPreferences) {
    this.smsPreferences = smsPreferences;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes("text/plain")
Response updateLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String time) throws RGuestException;
----------------------------------------------------
@POST
@Path(RATE_CALENDARS + CALENDAR_LENGTH + LENGTH_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
int setRateCalendarLength(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(LENGTH) int length) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
public GuestMessageIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
/**
 * WARNING: This method will not work when called from a Java client! There is an issue with Joda fields in
 * {@link QueryParam} or {@link BeanParam} objects. As obtuse as the 'v0' method is, at least it works.
 */
@GET
@Path(PREVIEW_RATES + "/v1")
@PreAuthorize("hasPermission('Required', 'WriteRates')")
AvailableRatePlan[] previewYieldedRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(ROOM_MOVE_TRACKING)
List<ReservationSummary> getRoomMoveReasonTrackingReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, Class<T> clazz) {
    T object = null;
    try {
        object = MAPPER.readValue(json, clazz);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_RULE_SET)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
List<RateRuleSetByDate> rateRuleSet(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RateRuleSetByDate> rateRuleSetByDate) throws RGuestException;
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Response deleteLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public Map<String, FederatedRatePlanRates> getRatePlans() {
    return ratePlans;
}
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/roomAssignmentRestricitions")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
RoomAssignmentRestrictions updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, RoomAssignmentRestrictions newValue) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferGuestReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedGuestProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, GuestProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
public InterfaceSettings getInterfaceSettings() {
    return interfaceSettings;
}
----------------------------------------------------
public Map<LocalDate, String> getRatePlanWithDate() {
    return ratePlanWithDate;
}
----------------------------------------------------
public OccupancyExport getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@Override
public PropertyLevelIdentifier deserialize(final JsonParser jsonParser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
    Map<String, String> jsonIdentifier = jsonParser.readValueAs(Map.class);
    PropertyLevelIdentifier identifier = new PropertyLevelIdentifier(jsonIdentifier.get("tenantId"), jsonIdentifier.get("propertyId"), jsonIdentifier.get("id"));
    return identifier;
}
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public void setRatePlanWithDate(Map<LocalDate, String> ratePlanWithDate) {
    this.ratePlanWithDate = ratePlanWithDate;
}
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------

--------------------------------------
payment
--------------------------------------
/**
 * @deprecated Use {@link #updateInventoryBlockAllocation(String, String, String, Boolean,
 * InventoryBlockAllocationUpdate)}
 * instead.
 */
@PUT
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Deprecated
InventoryBlock updateInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId, InventoryBlock inventoryBlock) throws RGuestException;
----------------------------------------------------
@POST
@Validated(GuestProfile.class)
@Path(GUEST_BASE)
@CreatedOnSuccess
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, GuestProfile model) throws RGuestException;
----------------------------------------------------
public Map<String, PayoffBalanceErrorResult.Error> getErrorsByPaymentSettingId() {
    return errorsByPaymentSettingId;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path(CONFIRMATION_CODE)
ReservationSummary webCheckin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(_ID) String confirmationCode, @QueryParam("") ReservationWriteOptionalParameters reservationWriteOptionalParameters) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ALLOCATION_RESOURCE)
GroupAllocationResult getGroupAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public void setRoomTypeSellOrder(Integer roomTypeSellOrder) {
    this.roomTypeSellOrder = roomTypeSellOrder;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(SEARCH_PATH + COMPANY_PATH)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
CompanyReservationSearchPage searchReservationsByCompanyId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, CompanyReservationSearchFilter searchFilter) throws RGuestException;
----------------------------------------------------
@PUT
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationUpdate.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
InventoryBlockAllocationResult updateInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancel")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Deprecated
ReservationSummary cancel(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public LocalDate getShoulderEndDate() {
    return shoulderEndDate;
}
----------------------------------------------------
@PUT
@Validated(PersonalDetails.class)
@Path(GUEST_BASE + ID_PATH_PARAM + PERSONAL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
PersonalDetails updateGuestProfilePersonalDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PersonalDetails update) throws RGuestException;
----------------------------------------------------
public ServicePattern toModel() {
    ServicePattern servicePattern = new ServicePattern();
    servicePattern.setId(id);
    servicePattern.setCustom(custom);
    servicePattern.setLengthOfStay(lengthOfStay);
    servicePattern.setLastDayServices(lastDayServices);
    servicePattern.setType(type);
    servicePattern.setName(name);
    Map<String, int[]> servicePatternMap = new HashMap<>();
    Collection<ServicePatternAssociatedService> servicePatternAssociatedServices = services.values();
    for (ServicePatternAssociatedService servicePatternAssociatedService : servicePatternAssociatedServices) {
        servicePatternMap.put(servicePatternAssociatedService.getId(), servicePatternAssociatedService.getOccurrenceDays());
    }
    servicePattern.setServices(servicePatternMap);
    return servicePattern;
}
----------------------------------------------------
/**
 * Get {@see #id}.  @return {@link #id}.
 */
public String getId() {
    return id;
}
----------------------------------------------------
/**
 * @deprecated Use {@link #deleteInventoryBlockAllocations(String, String, String)} instead.
 */
@DELETE
@OkOnEmpty
@Path(ROOM_INVENTORY_BLOCK_RESOURCE)
@Deprecated
void deleteInventoryBlock(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ROOM_ID) String roomId, @PathParam(RESOURCE_ID) String inventoryBlockId) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam(INCLUDE_NONBEDDED) boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    super.before();
    List<LocalDate> datesToCreate = Lists.newArrayList(now, now.plusDays(1), LocalDate.now().plusDays(2));
    rateSnapshots = createRateSnapshots(datesToCreate);
    occupancyPerDay = createDailyOccupancy(datesToCreate);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}/replacesRoom/{currentRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @PathParam("currentRoomId") String currentRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@Deprecated
@POST
@Path(ALLOCATIONS_COLLECTION + "/renew")
@OkOnEmpty
BatchResult<String, Integer> bulkRenewRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<AllocationRequest> allocationRequests) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(DATE_ROLL_PERMISSION)
@Path(PROPERTY_RESOURCE + AUTO_NIGHT_AUDIT)
AutoNightAudit getAutoNightAudit(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path("/tenants/{" + CommandInterface.TENANT_ID + "}/{" + COMMAND_ID + "}")
CommandResult execute(@PathParam(TENANT_ID) String tenantId, @PathParam(COMMAND_ID) String commandId, CommandPayload commandPayload) throws RGuestException;
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/reports")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationReportRequest.class)
ReservationAllocationReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationAllocationReportRequest request) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + MARKETING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
MarketingDetails getMarketingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, JavaType javaType) {
    T object = null;
    try {
        object = MAPPER.readValue(json, javaType);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary updateEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationReservationEmailRequest reservationEmailRequest) throws RGuestException;
----------------------------------------------------
public String getId() {
    if (id == null) {
        id = UUID.randomUUID().toString();
    }
    return id;
}
----------------------------------------------------
/*
     * Note: CXF client throws an exception when API has LocalDate or LocalDateParam if they are encapsulated inside
     * an object.
     * Hence, the startDate and endDate are outside of the OtaAvailabilityParams.
     */
@GET
@Path("/otaAvailability")
OtaAvailabilityResult getOtaAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") OtaAvailabilityParams params) throws RGuestException;
----------------------------------------------------
public List<FolioBalance> getFolios() {
    return folios;
}
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_INVOICE_SUMMARY)
@PreAuthorize("hasPermission('Required', 'ReadProperties')")
List<FolioInvoiceDetail> getFolioInvoiceSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    addressDetails = new AddressDetails();
    address1 = new Address();
    address1.setAddressLine1("line1");
    address2 = new Address();
    address2.setAddressLine1("line2");
    address3 = new Address();
    address3.setAddressLine1("line3");
    addressDetails.getAddresses().add(address1);
    addressDetails.getAddresses().add(address2);
    addressDetails.getAddresses().add(address3);
    target = new Address();
}
----------------------------------------------------
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/renew")
ReservationAllocationResult renewReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook) throws RGuestException;
----------------------------------------------------
@Override
public ExternalReferenceType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
    return ExternalReferenceType.fromString(jp.getText());
}
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult getReservationAllocationRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'CheckinReservations')")
@Path("/{id}/checkin")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary checkin(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
public String getId() {
    return id;
}
----------------------------------------------------
@POST
@Path("/" + ID_TEMPLATE + "/unreleaseBlocks")
@Produces(MediaType.APPLICATION_JSON)
Group unreleaseRoomBlocks(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID) String id, @QueryParam(DATES) String dates, @QueryParam(SOURCE_INTERFACE_ID) String sourceInterfaceId) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(EmailDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + EMAIL_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
EmailDetails updateEmailDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, EmailDetails emailDetails) throws RGuestException;
----------------------------------------------------
/*
     * BED METHODS
     */
@POST
@CreatedOnSuccess
@Path(BEDS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(Bed.class)
Bed createBed(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Bed bed) throws RGuestException;
----------------------------------------------------
public PaymentInfo getPayment() {
    return payment;
}
----------------------------------------------------
@POST
@Path("/")
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(CreateReservationRequest.class)
ReservationResult createReservation(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, CreateReservationRequest request) throws IntegrationException;
----------------------------------------------------
@POST
@Path("/stayDateSummary")
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
void sendStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, EmailRequest emailRequest) throws RGuestException;
----------------------------------------------------
MarketingDetails getMarketingDetails(String propertyId);
----------------------------------------------------
@Override
public String apply(RelatedTraveler relatedTraveler) {
    return relatedTraveler.getId();
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/list")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceAllVerifiedGuestIdentityIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Collection<String> newElements) throws RGuestException;
----------------------------------------------------
public String getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'MoveReservations')")
@Path(MOVE_PATH)
MoveReservationSummary transferReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESERVATION_ID) String reservationId, ReservationMoveRequest reservationMoveRequest, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/{id}/card")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
DigitalRegistrationCardSettings getReservationCardInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * Updates one or more status attributes for the specified room.
 *
 * @param tenantId         The tenant ID.
 * @param propertyId       The property ID.
 * @param roomId           The room ID.
 * @param roomStatusUpdate The update(s) to perform identified by a {@link RoomStatusUpdate}.
 */
@PUT
@Path(ROOM_RESOURCE + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String roomId, RoomStatusUpdate roomStatusUpdate) throws RGuestException;
----------------------------------------------------
@GET
@Path(LEGACY_ROOMS_COLLECTION + "/metrics")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
RoomMetrics getRoomMetrics(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/metricsByBuilding")
@PreAuthorize(READ_PROPERTIES_PERMISSION)
Map<String, RoomMetrics> getRoomMetricsByBuilding(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("date") LocalDate reportDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
/*
     * RESERVATION ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(RESERVATION_ALLOCATIONS_COLLECTION + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHold.class)
AllocationRoomHoldResult createReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationHold hold) throws RGuestException;
----------------------------------------------------
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@PUT
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@Validated(RateCalendarDetail.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateCalendarDetail updateRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, RateCalendarDetail resource) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationUpdate.class)
ReservationAllocationResult updateReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationUpdate update) throws RGuestException;
----------------------------------------------------
String getId();
----------------------------------------------------
/*
     * GROUP ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(GROUP_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationOrigin.class)
AllocationIdResult createGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/book")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationBooking.class)
void updateReservationAllocationBooking(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationBooking booking) throws RGuestException;
----------------------------------------------------
@GET
@Path(DATE_ROLL_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(DATE_ROLL_PERMISSION)
DateRollStatus getDateRollStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ENDING_DATE) LocalDate endingDate) throws RGuestException;
----------------------------------------------------
/**
 * Calls the new time zone method, but if the server instance doesn't have the endpoint calls the old property
 * endpoint instead.
 */
@Deprecated
public static String getPropertyTimeZone(PropertyManagementInterface proxy, String tenantId, String propertyId) {
    try {
        return proxy.getPropertyTimeZone(tenantId, propertyId);
    } catch (RGuestException e) {
        if (!matches(e, Status.NOT_FOUND)) {
            throw e;
        }
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    } catch (NotFoundException e) {
        return proxy.getPropertyById(tenantId, propertyId).getPropertyTimeZone();
    }
}
----------------------------------------------------
@Deprecated
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE)
ReservationAllocationResult getReservationAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam("") ReservationAllocationOptionalParams params) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    reservation = new Reservation();
    reservation.setTenantId(TestTenantId);
    reservation.setConfirmationId(TestConfirmationId);
    reservation.setPropertyId(TestPropertyId);
    reservation.setArrivalDate(TestArrivalDate);
    reservation.setDepartureDate(TestDepartureDate);
    reservation.setRoomType(TestRoomType);
    reservation.setRoomId(TestRoomId);
    reservation.setEchoToken(TestEchoToken);
    reservation.setMessageTimestamp(new Date());
    reservation.setAccountId(TestAccountId);
    reservation.setGroup(TestGroupName);
    reservation.setHousekeepingPattern(TestHousekeepingPattern);
    reservation.setCompany(TestCompanyName);
    reservation.setWholesaler(TestWholesalerName);
    reservation.setPrimaryGuestProfileId(TestGuestProfileId);
    reservation.setBookedBy(TestUsername);
    reservation.setSegmentCode(TestSegmentCode);
    reservation.setSourceCode(TestSourceCode);
    reservation.setNonRegisteredGuest(true);
    reservation.setLateCheckIn(true);
    reservation.setDoNotDisturb(true);
    reservation.setVipStatus("PLT");
    reservation.setNumberOfKeysCreated(TestNumberOfKeysCreated);
    setupBookingSources(reservation);
    setupIdentities(reservation);
    setupPreferences(reservation);
    setupAgencies(reservation);
    setupGuests(reservation);
}
----------------------------------------------------
public String getId() {
    return _id;
}
----------------------------------------------------
@DELETE
@Path(RATE_PLANS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRatePlan(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/events")
AllocationEventsResult getReservationAllocationEvents(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@Path("/findByDate")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
List<Group> findByDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(DATE) LocalDate date, @QueryParam(GROUP_NAME) String groupName) throws RGuestException;
----------------------------------------------------
@GET
@Path(GROUP_ROOMS_CONTROL)
// @PreAuthorize("hasPermission('Required', 'ReadGroupSetup')")
GroupRoomsControlResult getGroupRoomsControlReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("marketSegmentIds") String marketSegmentIds, @QueryParam("isWholesaler") Boolean isWholesaler, @QueryParam("isTransient") Boolean isTransient, @QueryParam("searchTerm") String searchTerm, @QueryParam("detailed") boolean detailed) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(AddressDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + ADDRESS_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
AddressDetails updateAddressDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, AddressDetails update) throws RGuestException;
----------------------------------------------------
public void setAutoNightAudit(boolean autoNightAudit) {
    this.autoNightAudit = autoNightAudit;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/dailyStatsByBuilding/{type}")
Map<String, GeneralAvailabilityResult> getDailyStatsReportByBuildings(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @PathParam("type") String type, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, GeneralAvailabilityRequest generalAvailabilityRequest) throws RGuestException;
----------------------------------------------------
@POST
@Path("/giftCard/issue")
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
TransactionResponse loadGiftCard(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, GiftCardTransactionRequest request) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Availability
// ------------------------------------------------------------------------------
// note that companyId, groupId and groupRateDetailId are only supported for federated rates.
@GET
@Path(AVAILABLE_RATES)
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(FEATURED_RATE_PLAN_IDS) String featuredRatePlanIds, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(RATE_PLAN_CODES) String ratePlanCodes, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(IGNORE_BOOKING_DATES) Boolean ignoreBookingDates, @QueryParam(CURRENT_ROOM_TYPE_ID) String currentRoomTypeId, @QueryParam(CURRENT_ARRIVAL_DATE) LocalDate currentArrivalDate, @QueryParam(CURRENT_DEPARTURE_DATE) LocalDate currentDepartureDate, @QueryParam(UNAVAILABLE) Boolean unavailable, @QueryParam(EVALUATE_BY_DATE) Boolean evaluateByDate, @QueryParam(VERBOSE) Boolean verbose, @QueryParam(COMPANY_ID) String companyId, @QueryParam(GROUP_ID) String groupId, @QueryParam(GROUP_CODE) String groupCode, @QueryParam(INCLUDE_PACKAGES) Boolean includePackages) throws RGuestException;
----------------------------------------------------
@PUT
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
@Deprecated
MarketingDetails getMarketingDetails();
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> replaceVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String oldElement, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String newElement) throws RGuestException;
----------------------------------------------------
@DELETE
@Path(RESERVATION_ALLOCATION_RESOURCE)
void deleteReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    now = LocalDate.now();
}
----------------------------------------------------
@Override
public boolean apply(GuestPreference input) {
    return GuestPreference.isValid(input);
}
----------------------------------------------------
@Before
public void before() {
    email1 = new Email();
    email1.setEmailAddress("email1");
    target = new Email();
    emailDetails = new EmailDetails();
    emailDetails.getEmailAddresses().add(email1);
}
----------------------------------------------------
public List<AvailableRatePlanRates> getRatePlans() {
    return ratePlans;
}
----------------------------------------------------
PaymentSettingDetails getPaymentSettingDetails(String propertyId);
----------------------------------------------------
public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
}
----------------------------------------------------
@POST
@Path(BULK_RESERVATION_ALLOCATION_ROOMS_COLLECTION + "/releaseAll")
@Deprecated
BatchResult<String, AllocationRequest> bulkReleaseRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<AllocationRequest> update) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_ROOMS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomUpdate.class)
AllocatedRoomsListResult updateReservationAllocationRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@Validated(SMSPreferences.class)
SMSPreferences updateSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, SMSPreferences smsPreferences) throws RGuestException;
----------------------------------------------------
/**
 * @return the propertyTimeZone
 */
public String getPropertyTimeZone() {
    return propertyTimeZone;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalRoomTypeAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @QueryParam("includeNonBeddedRoomType") boolean includeNonBeddedRoomType, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
public String getId() {
    return toString();
}
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/verifiedGuestIdentityIds/{element}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<String> removeVerifiedGuestIdentityId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @PathParam("element") String element, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Validated(TrackingInfo.class)
@Path("/{id}/tracking")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
TrackingInfo updateTrackingInfo(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationWriteOptionalParameters optionalParams, TrackingInfo trackingInfo) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/roomType")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRoomTypeUpdate.class)
void updateReservationAllocationRoomType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, ReservationAllocationRoomTypeUpdate update) throws RGuestException;
----------------------------------------------------
// TODO: require permission only available to reservation service account
/**
 * Restores an allocation to an expected state. This method exists solely to correct inconsistency between a
 * reservation and its allocation.
 */
@POST
@Path(RESERVATION_ALLOCATION_RESOURCE + "/repair")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationRepair.class)
ReservationAllocationResult repairReservationAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationRepair repair) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/modifyGroupReservationsByPreset")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Map<String, UpdatedExistingReservationResult> updateExistingReservationsWithPreset(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, UpdatedPresetInfo update) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rate Calendars
// ------------------------------------------------------------------------------
@GET
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
RateCalendarDetail getRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@Path("/tenants/{" + CommandInterface.TENANT_ID + "}/interfaces/{" + CommandInterface.INTERFACE_ID + "}/{" + COMMAND_ID + "}")
@Consumes(MediaType.APPLICATION_JSON)
CommandResult execute(@PathParam(TENANT_ID) String tenantId, @PathParam(INTERFACE_ID) String interfaceId, @PathParam(COMMAND_ID) String commandId, CommandPayload commandPayload) throws RGuestException;
----------------------------------------------------
@PUT
@Validated(PhoneDetails.class)
@Path(PROFILE_BASE + ID_PATH_PARAM + PHONE_DETAILS)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or " + "hasPermission('Required', 'WriteCompanyProfiles') or " + "hasPermission('Required', 'WriteTravelAgentProfiles') ")
PhoneDetails updatePhoneDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, PhoneDetails update) throws RGuestException;
----------------------------------------------------
public LocalDate getPropertyDate() {
    return propertyDate;
}
----------------------------------------------------
@PUT
@Validated(GuestProfile.class)
@Path(GUEST_BASE + ID)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
GuestProfile updateGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String id, GuestProfile model) throws RGuestException;
----------------------------------------------------
@GET
@Path(RESERVATION_ALLOCATION_RESOURCE + "/history")
List<HistoryEvent> getReservationAllocationHistory(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'CancelReservations')")
@Path("/{id}/cancellationPolicies")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationCancellationPolicies getCancellationPolicies(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId) throws RGuestException;
----------------------------------------------------
/**
 * @return the id
 */
@DataPortIgnore
@Override
public String getId() {
    return super.getId();
}
----------------------------------------------------
public Map<String, Balance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// General Availability
// ------------------------------------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY)
GeneralAvailabilityResult getGeneralAvailability(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
public void setContinueOnPaymentFailure(boolean continueOnPaymentFailure) {
    this.continueOnPaymentFailure = continueOnPaymentFailure;
}
----------------------------------------------------
@Before
public void before() throws Exception {
    mapper = new ObjectMapperConfigContext().objectMapper();
}
----------------------------------------------------
@GET
@Path(PROPERTY_RESOURCE + "/timeZone")
@JsonString
@CacheOnClient(type = EonsType.PROPERTY_TIME_ZONE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = MODERATE)
String getPropertyTimeZone(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public SMSPreferences getSmsPreferences() {
    return smsPreferences;
}
----------------------------------------------------
public PropertyLevelIdentifier getId() {
    return id;
}
----------------------------------------------------
public Integer getMinLOS() {
    return minLOS;
}
----------------------------------------------------
@Before
public void setup() {
    testAgency = new Agency();
}
----------------------------------------------------
public String getPaymentMethodId() {
    return paymentMethodId;
}
----------------------------------------------------
public void setMaxLOS(Integer maxLOS) {
    this.maxLOS = maxLOS;
}
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/doNotMoveRoom")
@Consumes("text/plain")
@Deprecated
Response updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, Boolean newValue) throws RGuestException;
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return this.marketingDetails;
}
----------------------------------------------------
public MarketingDetails getMarketingDetails() {
    return marketingDetails;
}
----------------------------------------------------
public Payment getPayment() {
    return payment;
}
----------------------------------------------------
@DELETE
@OkOnEmpty
@Path(RATE_CALENDARS + RESOURCE_ID_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void deleteRateCalendar(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
@Override
@ReportingExportId
public String getId() {
    return super.getId();
}
----------------------------------------------------
public PaymentSettingDetails getPaymentSettingDetails() {
    return this.paymentSettingDetails;
}
----------------------------------------------------
public String getId();
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(STAY_DATE_SUMMARY)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Collection<StayDateSummary> getStayDateSummary(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_PLANS + BULK_UPDATE)
@Validated(BulkUpdateRatePlanRequest.class)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
void bulkUpdateRatePlans(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, BulkUpdateRatePlanRequest bulkUpdateRatePlanRequest) throws RGuestException;
----------------------------------------------------
public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
}
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/summary")
SummaryReport getSummaryReport(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("date") LocalDate dateToReportOn) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/altConfirmationCode")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
String updateAltConfirmationCode(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, String altConfirmationCode, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize(READ_PROPERTIES_PERMISSION)
@Path(SMS_FEATURE_SETTINGS)
SMSFeatureSetting getSmsFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
public Integer getMaxLOS() {
    return maxLOS;
}
----------------------------------------------------
@Before
public void before() {
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    mapper.registerModule(new JodaModule());
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId  tenantId
 * @param profileId profileId
 */
@POST
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles')")
@Path(GUEST_BASE + ID + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam("id") String profileId) throws RGuestException;
----------------------------------------------------
public RetentionDetails getEmailAddress() {
    return emailAddress;
}
----------------------------------------------------
/**
 * Anonymize the PII fields of a profile in a tenant
 *
 * @param tenantId   tenantId
 * @param propertyId propertyId
 * @param profileId  profileId
 */
@PUT
@PreAuthorize("hasPermission('Required', 'ManualAnonymize')")
@Path(GUEST_BASE + ID_PATH_PARAM + ANONYMIZE)
void anonymizeGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ID_ARGUMENT) String profileId, String message) throws RGuestException;
----------------------------------------------------
/**
 * Get folios
 *
 * @return List of folios
 */
public List<FolioSummary> getFolios() {
    return folios;
}
----------------------------------------------------
@POST
@Path("/")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'BookReservations')")
@CreatedOnSuccess
@Validated(ReservationCreateRequest.class)
ReservationSummary createReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCreateRequest reservation, @QueryParam("isPending") boolean isPending, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_BULK_ROOM_BLOCKS_RELEASE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
BulkGroupReleaseResponse updateGroupAllocations(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, GroupBulkRoomBlockRelease groupBulkRoomBlockRelease) throws RGuestException;
----------------------------------------------------
public Integer getRoomTypeSellOrder() {
    return roomTypeSellOrder;
}
----------------------------------------------------
public String getId() {
    return _id = date.toString();
}
----------------------------------------------------
@GET
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
@Path(SMS_SETTINGS)
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("reservationId") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(GENERAL_AVAILABILITY_REPORT)
@Deprecated
GeneralAvailabilityReport getGeneralAvailabilityReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/modifyStay")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary modifyStay(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, StayModificationDetails stayModificationDetails) throws RGuestException;
----------------------------------------------------
/*
     * INVENTORY BLOCK ALLOCATION METHODS
     */
@POST
@CreatedOnSuccess
@Path(INVENTORY_BLOCK_ALLOCATIONS_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(InventoryBlockAllocationOrigin.class)
@PreAuthorize(WRITE_HOUSEKEEPING_PERMISSION)
AllocationIdResult createInventoryBlockAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(OVERBOOK) Boolean overbook, InventoryBlockAllocationOrigin origin) throws RGuestException;
----------------------------------------------------
@GET
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_PROPERTY_LISTINGS_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
List<TenantARPropertySettingStatus> getAccountReceivablePropertySettingStatus(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
// ------------------------------------------------------------------------------
// OTA Rates
// ------------------------------------------------------------------------------
@GET
@Path(OTA_RATES)
OtaRatesResult getOtaRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") OtaRatesParams params) throws RGuestException;
----------------------------------------------------
@POST
@Path(COMPANY_PROFILE_PATH + TENANT_DEFAULT_SETTINGS_APPLY_PATH)
@PreAuthorize("hasPermission('Required', 'WriteCompanyProfileDefaults')")
AccountUpdateResponse applyTenantDefaultSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(COMPANY_PROFILE_ID) String companyProfileId) throws RGuestException;
----------------------------------------------------
@POST
@Path(BATCH_ASSIGN_ROOM)
@Deprecated
BatchResult<String, RoomAllocationRequest> batchAssignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomAllocationRequest> assignRoomRequests) throws RGuestException;
----------------------------------------------------
@POST
@Path(ACCOUNT_ID_PATH + CHARGES_PATH)
@Validated(Charge.class)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
List<LineItemView> postCharge(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("ignoreAuth") boolean ignoreAuth, Charge charge) throws RGuestException;
----------------------------------------------------
@Deprecated
PaymentSettingDetails getPaymentSettingDetails();
----------------------------------------------------
/*
     * ACCOUNTING DATE METHODS
     */
@GET
@Path(PROPERTY_RESOURCE + "/propertyDate")
@CacheOnClient(type = EonsType.PROPERTY_DATE, tenantId = TENANT_ID, propertyId = PROPERTY_ID, riskTolerance = CONSERVATIVE)
LocalDate getPropertyDate(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId) throws RGuestException;
----------------------------------------------------
private static <T> String serialize(T object) {
    String json = null;
    try {
        json = MAPPER.writeValueAsString(object);
        assertNotNull(json);
    } catch (IOException e) {
        e.printStackTrace();
        fail(SERIALIZATION_ERROR);
    }
    return json;
}
----------------------------------------------------
@GET
@Path("/housekeepingPatternId/{housekeepingPatternId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
List<ReservationSummary> findByHousekeepingPatternId(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("housekeepingPatternId") String housekeepingPatternId, @QueryParam("date") LocalDate date, @QueryParam("statusId") String[] statusIds) throws RGuestException;
----------------------------------------------------
@POST
@Path(LEGACY_ROOMS_COLLECTION + "/reports")
RoomReportResult getReportingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomReportRequest request) throws RGuestException;
----------------------------------------------------
@POST
@Path(CANCEL_PAYMENTS)
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
ReservationCancellationResponse processCancellation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, AccountStatementsRequest accountStatementsRequest) throws RGuestException, ServiceException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/filteredNameAndDates")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
List<ReservationNameAndDates> findReservationNameAndDatesByPost(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, ReservationCollectionRequest request) throws RGuestException;
----------------------------------------------------
public Occupancy getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
@Path(CONFIG_COLLECTION + RECENT_ITEMS)
void updateRecentItemsTimePeriod(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RecentItemsDuration recentItemsTimeDuration) throws RGuestException;
----------------------------------------------------
@GET
@Path("/{id}/occupancy")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
Occupancy getOccupancy(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String id, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_BALANCES_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioBalance> getFolioBalances(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId) throws RGuestException;
----------------------------------------------------
@GET
@Path(AVAILABLE_RATES + "/v1")
AvailableRatePlan[] getAvailableRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(GUEST_RESOURCE + "allReservations")
Map<String, List<ReservationSummary>> getActiveReservations(@PathParam(TENANT_ID) String tenantId, ActiveReservationRequest activeReservationRequest) throws RGuestException;
----------------------------------------------------
/**
 * Get folioBalances
 *
 * @return Map of folioId to folioBalances
 */
public Map<String, FolioBalance> getFolioBalances() {
    return folioBalances;
}
----------------------------------------------------
public String getId() {
    return id;
}
----------------------------------------------------
public String getId() {
    return this.id;
}
----------------------------------------------------
public String getAccountId() {
    return accountId;
}
----------------------------------------------------
public String getAccountId() {
    return this.accountId;
}
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(ACCOUNT_ID_PATH + PAYOFF_BALANCE_PATH)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
void payOffBalance(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, PayoffBalanceRequest request) throws RGuestException;
----------------------------------------------------
public void setForceCheckin(boolean forceCheckin) {
    this.forceCheckin = forceCheckin;
}
----------------------------------------------------
@GET
@Path(INVENTORY_BLOCK_ALLOCATION_RESOURCE)
InventoryBlockAllocationResult getInventoryBlockAllocationById(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id) throws RGuestException;
----------------------------------------------------
public CommissionPayment getPayment() {
    return payment;
}
----------------------------------------------------
// ------------------------------------------------------------------------------
// Rates (for reports)
// ------------------------------------------------------------------------------
@GET
@Path(REPORT_RATES)
AvailableRatePlan[] getReportRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(ARRIVAL_DATE) LocalDate arrivalDate, @QueryParam(DEPARTURE_DATE) LocalDate departureDate, @QueryParam(ADULTS) Integer adults, @QueryParam(CHILDREN) Integer children, @QueryParam(RATE_PLAN_IDS) String ratePlanIds, @QueryParam(ROOM_TYPE_IDS) String roomTypeIds, @QueryParam(INCLUDE_GROUPS) Boolean includeGroups, @QueryParam(VERBOSE) Boolean verbose) throws RGuestException;
----------------------------------------------------
public LodgingInformation getLodgingInformation() {
    return lodgingInformation;
}
----------------------------------------------------
/*
     * ROOM FEATURE METHODS
     */
@POST
@CreatedOnSuccess
@Path(ROOM_FEATURES_COLLECTION)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(RoomFeature.class)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
RoomFeature createRoomFeature(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomFeature roomFeature) throws RGuestException;
----------------------------------------------------
@Before
public void before() {
    phone1 = new Phone();
    phone1.setNumber("phone1");
    target = new Phone();
    phoneDetails = new PhoneDetails();
    phoneDetails.getPhones().add(phone1);
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/email")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
void saveEmail(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters reservationOptionalParams, ConfirmationEmailRequest confirmationEmailRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(ACCOUNT_ID_PATH + FOLIO_PATH)
@PreAuthorize("hasPermission('Required', 'ReadAccounts')")
List<FolioDetail> getFolios(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(ACCOUNT_ID) String accountId, @QueryParam("") GetFoliosOptionalParameters optionalParameters) throws RGuestException;
----------------------------------------------------
public String getPayment() {
    return payment;
}
----------------------------------------------------
@PUT
@Path(ROOMS_COLLECTION + "/status")
@Consumes(MediaType.APPLICATION_JSON)
void updateRoomStatuses(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RoomStatusesUpdate roomStatusesUpdate) throws RGuestException;
----------------------------------------------------
@GET
@NoContentOnEmpty
@Path(MEAL_PERIODS_COLLECTION)
List<MealPeriod> findMealPeriods(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") MealPeriodOptionalParams params) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(GUEST_BASE)
@PreAuthorize("hasPermission('Required', 'WriteGuestProfiles') or hasPermission('Required', 'CreateGuestProfiles')")
@Validated(GuestProfileCreateRequest.class)
GuestProfile createGuestProfile(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") WriteIntendedProfileOptionalParams optionalParams, GuestProfileCreateRequest createRequest) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PAYMENT_SETTING_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles') or " + "hasPermission('Required', 'ReadCompanyProfiles') or " + "hasPermission('Required', 'ReadTravelAgentProfiles') ")
PaymentSettingDetails getPaymentSettingDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_OVERRIDE)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
RateOverrideDetail rateOverride(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, RateOverrideDetail rateOverride) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path("/generalAvailability")
GeneralAvailabilityResult getGeneralAvailability(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("startDate") LocalDate startDate, @QueryParam("endDate") LocalDate endDate, @DefaultValue("true") @QueryParam("roomRevenue") boolean roomRevenue, @DefaultValue("false") @QueryParam("embed") boolean embed) throws RGuestException;
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + PREFERENCE_DETAILS)
@PreAuthorize("hasPermission('Required', 'ReadGuestProfiles')")
PreferenceDetails getPreferenceDetails(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String id, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@POST
@CreatedOnSuccess
@Path(RESERVATION_IDS_TO_AUTHORIZE)
Set<String> getReservationIdsToAuthorize(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> accountIds) throws RGuestException, ServiceException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/interfaceSettings")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
InterfaceSettings getInterfaceSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationServiceOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(ROOM_SELL_ORDER_UPDATE)
@Consumes(MediaType.APPLICATION_JSON)
@PreAuthorize(WRITE_PROPERTY_CONFIG_PERMISSION)
void updateRoomSellOrder(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RoomType> roomTypes) throws RGuestException;
----------------------------------------------------
public void setSmsPreferences(SMSPreferences smsPreferences) {
    this.smsPreferences = smsPreferences;
}
----------------------------------------------------
@POST
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/assignRoom/{newRoomId}")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
ReservationSummary assignRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @PathParam("newRoomId") String newRoomId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
@PUT
@Path(GROUP_ALLOCATION_RESOURCE)
@Consumes(MediaType.APPLICATION_JSON)
@Validated(GroupAllocationUpdate.class)
GroupAllocationResult updateGroupAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, @QueryParam(OVERBOOK) Boolean overbook, GroupAllocationUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes("text/plain")
Response updateLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, String time) throws RGuestException;
----------------------------------------------------
@POST
@Path(RATE_CALENDARS + CALENDAR_LENGTH + LENGTH_PATH)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
int setRateCalendarLength(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(LENGTH) int length) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(CALL_ALLOWANCE_CALL_TYPE)
CallAllowanceSettings updateCallAllowanceOnCallType(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(CALL_TYPE_CODE) String callTypeCode, DailyAllowance dailyAllowance) throws RGuestException;
----------------------------------------------------
@GET
@Path("/availableRooms")
AvailableRoomsResult getAvailableRooms(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") AvailableRoomsParams params) throws RGuestException;
----------------------------------------------------
public GuestMessageIdentifier getId() {
    return id;
}
----------------------------------------------------
@GET
@Path(PROFILE_BASE + ID_PATH_PARAM + SMS_PREFERENCES)
@PreAuthorize(READ_SMS_NOTIFICATION_SETTINGS_PERMISSION)
SMSPreferences getSmsPreferences(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(PROFILE_TYPE) String profileType, @PathParam("id") String profileId, @QueryParam("") ProfileOptionalParams optionalParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SocialMedia socialMedia) {
    return socialMedia.getId();
}
----------------------------------------------------
/**
 * WARNING: This method will not work when called from a Java client! There is an issue with Joda fields in
 * {@link QueryParam} or {@link BeanParam} objects. As obtuse as the 'v0' method is, at least it works.
 */
@GET
@Path(PREVIEW_RATES + "/v1")
@PreAuthorize("hasPermission('Required', 'WriteRates')")
AvailableRatePlan[] previewYieldedRates(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam("") AvailableRatesParams availableRatesParams) throws RGuestException;
----------------------------------------------------
@Override
public String apply(SettlementOnFile settlementOnFile) {
    return settlementOnFile.getId();
}
----------------------------------------------------
/**
 * Retrieve a new terminalId. Callers should store this value and not call this method again as
 * a new terminalId will be assigned with each call, and they are limited in number.
 *
 * The system terminalId is a special one reserved for use by other parts of the system where
 * a terminalId isn't passed in from the UI.
 *
 * @param tenantId   the tenantId to retrieve settings for
 * @param propertyId the propertyId to retrieve settings for
 * @param system     whether or not the requested terminalId should be the system terminalId
 * @return terminalId
 */
@GET
@Path("/terminalId")
@Produces(MediaType.APPLICATION_JSON)
@PreAuthorize("hasPermission('Required', 'WriteAccounts')")
String getTerminalId(@PathParam("tenantId") String tenantId, @PathParam("propertyId") String propertyId, @QueryParam("system") boolean system) throws RGuestException;
----------------------------------------------------
@GET
@PreAuthorize("hasPermission('Required', 'ReadReservations')")
@Path(ROOM_MOVE_TRACKING)
List<ReservationSummary> getRoomMoveReasonTrackingReport(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate) throws RGuestException;
----------------------------------------------------
private static <T> T deserialize(String json, Class<T> clazz) {
    T object = null;
    try {
        object = MAPPER.readValue(json, clazz);
    } catch (IOException e) {
        e.printStackTrace();
        fail(DESERIALIZATION_ERROR);
    }
    return object;
}
----------------------------------------------------
/**
 * retrieve allocated room id for date by allocation Id for the given date range
 */
@POST
@Path(ALLOCATIONS_COLLECTION + "/byAllocation")
@Consumes(MediaType.APPLICATION_JSON)
Map<String, Map<LocalDate, RoomAndBuildingDetail>> getRoomByDateByAllocationIds(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Set<String> allocationIds) throws RGuestException;
----------------------------------------------------
@PUT
@Path(RATE_RULE_SET)
@PreAuthorize("hasPermission('Required', 'WriteRates')")
List<RateRuleSetByDate> rateRuleSet(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, List<RateRuleSetByDate> rateRuleSetByDate) throws RGuestException;
----------------------------------------------------
@DELETE
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/{id}/lateCheckout")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Response deleteLateCheckout(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams) throws RGuestException;
----------------------------------------------------
public Map<String, FederatedRatePlanRates> getRatePlans() {
    return ratePlans;
}
----------------------------------------------------
public String getTerminalId() {
    return terminalId;
}
----------------------------------------------------
public PreferenceDetails getPreferenceDetails() {
    return this.preferenceDetails;
}
----------------------------------------------------
@PUT
@Path(RESERVATION_ALLOCATION_RESOURCE + "/hold")
@Consumes(MediaType.APPLICATION_JSON)
@Validated(ReservationAllocationHoldUpdate.class)
void updateReservationAllocationHold(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String id, ReservationAllocationHoldUpdate update) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'ModifyDoNotMoveRoom')")
@Path("/{id}/roomAssignmentRestricitions")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
RoomAssignmentRestrictions updateDoNotMoveRoom(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam("id") String reservationId, @QueryParam("") ReservationWriteOptionalParameters optionalParams, RoomAssignmentRestrictions newValue) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize("hasPermission('Required', 'WriteReservations')")
@Path("/transferGuestReservations")
@Consumes(HTTPRequestConstants.JSON_MEDIA_TYPE)
Integer updateAssociatedGuestProfilesForReservation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, GuestProfileMergeObject profileMergeObject) throws RGuestException;
----------------------------------------------------
@PUT
@PreAuthorize(WRITE_PROPERTIES_PERMISSION)
@Path(PROPERTY_RESOURCE + "/featureSettings")
Property updateFeatureSettings(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, Map<String, Setting<?>> featureSettings) throws RGuestException;
----------------------------------------------------
public InterfaceSettings getInterfaceSettings() {
    return interfaceSettings;
}
----------------------------------------------------
public Map<LocalDate, String> getRatePlanWithDate() {
    return ratePlanWithDate;
}
----------------------------------------------------
public OccupancyExport getOccupancy() {
    return occupancy;
}
----------------------------------------------------
@Override
public PropertyLevelIdentifier deserialize(final JsonParser jsonParser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {
    Map<String, String> jsonIdentifier = jsonParser.readValueAs(Map.class);
    PropertyLevelIdentifier identifier = new PropertyLevelIdentifier(jsonIdentifier.get("tenantId"), jsonIdentifier.get("propertyId"), jsonIdentifier.get("id"));
    return identifier;
}
----------------------------------------------------
@GET
@Path(ALLOCATION_RESOURCE + "/matchingRooms")
AvailableRoomsResult getMatchingRoomsForAllocation(@PathParam(TENANT_ID) String tenantId, @PathParam(PROPERTY_ID) String propertyId, @PathParam(RESOURCE_ID) String allocationId, @QueryParam(START_DATE) LocalDate startDate, @QueryParam(END_DATE) LocalDate endDate, @QueryParam("") MatchingRoomsParams params) throws RGuestException;
----------------------------------------------------
public void setRatePlanWithDate(Map<LocalDate, String> ratePlanWithDate) {
    this.ratePlanWithDate = ratePlanWithDate;
}
----------------------------------------------------
PreferenceDetails getPreferenceDetails();
----------------------------------------------------
